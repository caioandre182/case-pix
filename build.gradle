plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
  id 'jacoco'
}

group = 'com.casepix'
version = '0.0.1-SNAPSHOT'
description = 'MÃ³dulo de cadastro de chaves pix'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
  runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:postgresql'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'org.assertj:assertj-core'
  testImplementation platform("org.testcontainers:testcontainers-bom:1.19.8")
  testImplementation "org.springframework.boot:spring-boot-testcontainers"
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacoco {
  toolVersion = '0.8.11'
}

jacocoTestReport {
  dependsOn test
  reports {
    html.required = true
    xml.required  = true
    csv.required  = false
  }
  def excludes = [
    '**/*Application*',
    '**/*Config*',
    '**/adapters/outbound/persistence/jpa/entity/**',
    '**/adapters/inbound/api/controller/**',
    '**/adapters/inbound/api/mapper/**',
    '**/application/port/in/**',
    '**/domain/enums/**',
    '**/domain/exception/**'
  ]
  classDirectories.setFrom(
    files(classDirectories.files.collect {
      fileTree(dir: it, exclude: excludes)
    })
  )
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'BRANCH'
        value   = 'COVEREDRATIO'
        minimum = 0.90
      }
    }
  }
}
